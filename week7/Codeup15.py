#내미래
#훈련병인 철수는 교관의 지시에 따라야한다.
#교관은 "좌로 1보, 하로 2보 가!"와 같이 좌,우,상,하로 이동할 것을 명령한다.
#철수의 현재 위치가 입력으로 주어질 때 교관의 명령대로 이동한 위치는 어디일까?
#제한 조건
#1. 철수의 현재 위치는 첫 입력 값으로 공백을 두고 입력된다. 
# ex) 1 1 => (0, 0), 5 4 => (4, 3)
#2. 훈련소의 전체 공간 크기는 5*5 이다.
#3. 교관이 지시한 명령은 절대 훈련소 공간을 벗어나지 않는다.
#4. 좌는 왼쪽, 우는 오른쪽, 상은 위쪽, 하는 아래쪽으로 한다.
#5. 입력은 좌,우,상,하의 순서대로 공백을 두고 입력된다. 
# ex) 3 2 3 3 => 좌로 2보, 우로 2보, 상으로 3보, 하로 3보 이동.
a = tuple(map(int, input().split()))   #변하지 말아야 해서 튜플에 넣어줌
l, r, u, d = map(int, input().split())
s = [[0 for _ in range(5)] for _ in range(5)]   #0부터4까지 만들고 그걸 4개 더 만듬

move = ( a[0] -u +d, a[1] -l +r )
s[move[0] -1][move[1] -1] = 1   #컴퓨터는 0,0부터 시작하므로 -1

for c in s:
  print( *c )

#96
#바둑판(19 * 19)에 n개의 흰 돌을 놓는다고 할 때,
#n개의 흰 돌이 놓인 위치를 출력하는 프로그램을 작성해보자.
n = int(input())
spa = [[0 for _ in range(19)] for _ in range(19)]  #19x19 판 만들고 0으로 초기화

for _ in range(n):
    x, y = map(lambda num : int(num)-1, input().split())  #인덱스 주소는 1이 작아 -1을 해줌
    spa[x][y] = 1  #나온 값을 1로 변경

for c in spa:
    print(*c)

#97
#바둑판(19 * 19)에 흰 돌(1) 또는 검정 돌(0)이 모두 꽉 채워져 놓여있을 때,
#n개의 좌표를 입력받아 십(+)자 뒤집기한 결과를 출력하는 프로그램을 작성해보자.
baduk = [
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
]
n = int(input())

for _ in range(n):
    x,y = map(lambda num : int(num)-1, input().split())
    for i in range(19):  #값 변환
        baduk[x][y] = 1 if baduk[x][y] == 0 else 0  #0은 1로 1은 0으로 변환
        baduk[y][x] = 1 if baduk[y][x] == 0 else 0  #0은 1로 1은 0으로 변환
for c in baduk:
    print(*c)

#98
#격자판의 세로(h), 가로(w), 막대의 개수(n), 각 막대의 길이(l),
#막대를 놓는 방향(d:가로는 0, 세로는 1)과
#막대를 놓는 막대의 가장 왼쪽 또는 위쪽의 위치(x, y)가 주어질 때,
#격자판을 채운 막대의 모양을 출력하는 프로그램을 만들어보자.
h,w = map(int, input().split())
shape = [[0 for _ in range(w)] for _ in range(h)] # 0으로 초기화
n = int(input())
for _ in range(n):   #5x5 형태 반복문 작성
    l,d,x,y = map(int, input().split())
    x,y = x-1, y-1

    if d == 0:
        for i in range(l):
            shape[x][y+i] = 1 #d가 0이면 가로가 바껴야하므로 y에 i를 더함
    else:
        for i in range(l):
            shape[x+i][y] = 1
    
for s in shape:
    print(*s)

#99
#미로 상자의 구조가 0(갈 수 있는 곳), 1(벽 또는 장애물)로 주어지고,
#먹이가 2로 주어질 때, 성실한 개미의 이동 경로를 예상해보자.
ant_house = [
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
         [1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
         [1, 0, 0, 1, 1, 1, 0, 0, 0, 1],
         [1, 0, 0, 0, 0, 0, 0, 1, 0, 1],
         [1, 0, 0, 0, 0, 0, 0, 1, 0, 1],
         [1, 0, 0, 0, 0, 1, 0, 1, 0, 1],
         [1, 0, 0, 0, 0, 1, 2, 1, 0, 1],
         [1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
         [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]
x,y = 1,1

while ant_house[x][y] !=2:
    if ant_house[x][y] ==0:
        ant_house[x][y] =9
        y +=1
    else :
        x +=1
        y -=1
ant_house[x][y] = 9
for house in ant_house:
    print(*house)